<?php
include_once 'C:\xampp\htdocs\Foodonya\Pizza Craft Christies\php\cart.php';

// running from the cli doesn't set $_SESSION here on phpunit trunk
// it is essential have pre-existing session variables for some tests. 
// In that case, phpunit will look at this array named _SESSION to get the session variables when no existing session present.
if (!isset($_SESSION))
  $_SESSION = array();

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-07-07 at 18:26:13.
 */
class PizzacrItemTest extends PHPUnit_Framework_TestCase {

  /**
   * @var PizzacrItem
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   * 
   */
  protected function setUp() {
    //PizzacrItem($item_id, $item_name, $item_qty, $item_size_code, $item_price, $item_cost)
    $this->object = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 27.80);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers PizzacrItem::get_item_id
   */
  public function testGet_item_id() {
    $this->assertEquals(4, $this->object->get_item_id());
  }

  /**
   * @covers PizzacrItem::get_item_cost_str
   */
  public function testGet_item_cost_str() {
    $this->object = new PizzacrItem(4, "Sicilian", 200, "Large", 13.90, 2780);
    $this->assertSame('2780.00', $this->object->get_item_cost_str());
  }

  /**
   * @covers PizzacrItem::mark_delete
   */
  public function testMark_delete() {
    $obj1 = new PizzacrItem(4, "Sicilian", 0, "Large", 13.90, 0);
    $obj1->deleted = true;
    
    //mock session variable to get this test going
    //if this is not present, the test will not run as the pre-existing session 
    //variable not present for the method mark_delete() to complete running.
    $_SESSION['pc_counter'] = 17; 
        
    $this->object->mark_delete();
    
    $this->assertEquals($obj1, $this->object);
    $this->assertEquals( 16, $_SESSION['pc_counter'] ); //This will pass too. One test should contain only one assert, 
    //but you get the idea of using a mock session variable and manipulate it at mark_delete().
    $this->assertEquals(true, $this->object->get_delete()); //One test should contain only one assert, so.
  }

  /**
   * @covers PizzacrItem::mark_undelete
   */
  public function testMark_undelete() {
    $_SESSION['pc_counter'] = 16; 
        
    $this->object->mark_undelete();
    
    $this->assertEquals( 17, $_SESSION['pc_counter'] ); 
    $this->assertEquals(false, $this->object->get_delete()); //One test should contain only one assert, so.
  }

  /**
   * @covers PizzacrItem::update_item_qty
   */
  public function testUpdate_item_qty() {
    $this->object->update_item_qty(2);
    $this->assertEquals(4, $this->object->get_item_qty());
  }

  /**
   * @covers PizzacrItem::update_item_cost
   */
  public function testUpdate_item_cost() {
    $this->object->update_item_cost(10.20, 4); //(10.2 * 4 = 40.8) + 27.80 = 68.6
    $this->assertEquals(68.6, $this->object->get_item_cost());
  }

}


/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-07-07 at 18:26:13.
 */
class PizzacrCartTest extends PHPUnit_Framework_TestCase {

  /**
   * @var PizzacrCart
   */
  protected $cartObject, $cartObject1;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   * 
   */
  protected function setUp() {
    $this->cartObject = new PizzacrCart();
    $this->cartObject1 = new PizzacrCart();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers PizzacrCart::add_item
   * @covers PizzacrCart::get_item
   */
  public function testAdd_item() {
    $expected = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 27.80);
    $inObj = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0); //item_cost = 0 because it will be updated to 27.80 in add_item()
    $_SESSION['pc_counter'] = 0;
    
    $this->cartObject->add_item($inObj);

    $this->assertEquals($expected, $this->cartObject->get_item(0)); 
    //mock cartObject1 not created for assert, instead get_item() is used to get item object from cartObject and asserted.
    //See Foodonya testing document.docx section "How to mock an array (items array in cart object) containing (several item) objects"
    //$this->assertEquals(1, $this->cartObject->get_depth()); 

  }
  /**
   * @covers PizzacrCart::get_depth
   * @covers PizzacrCart::add_item
   */
  public function testGet_Depth() {
    $expected = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 27.80);
    $inObj = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0); //item_cost = 0 because it will be updated to 27.80 in add_item()
    $_SESSION['pc_counter'] = 0;
    
    $this->cartObject->add_item($inObj);


    $this->assertEquals(1, $this->cartObject->get_depth()); 

  }
  /**
   * @covers PizzacrCart::delete_item
   * @covers PizzacrCart::add_item
   * @covers PizzacrCart::get_delete_status
   */
  public function testDelete_Item() {
    $inObj1 = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0); //item_cost = 0 because it will be updated to 27.80 in add_item()
    $inObj2 = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0);
    $_SESSION['pc_counter'] = 0;
    
    $this->cartObject->add_item($inObj1);
    $this->cartObject->add_item($inObj2);
    
    $this->cartObject->delete_item(0);

    //$Obj1 = $this->cartObject->get_item(0);
    
    $this->assertEquals(true, $this->cartObject->get_delete_status(0));
    //I had to code the get_delete_status getter to test this method. 
    //Without that getter probably it is impossible to test this method.
    //Without getters, probably it is impossible to test most methods for that matter.
  }  
    
  
  
  //-------------------------------------------------------------"see how other asserts work" tests
  
  //This is just some "see how assertArrayHasKey works" test and not really tests the cart.php's direct functionality  
  public function testSee_how_assertArrayHasKey_works() {
    $inObj1 = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0); //item_cost = 0 because it will be updated to 27.80 in add_item()
    $inObj2 = new PizzacrItem(2, "Supreme", 2, "Large", 13.90, 0);

    $_SESSION['pc_counter'] = 0;
    
    $this->cartObject->add_item($inObj1);
    $this->cartObject->add_item($inObj2);
    
    //for testing in the console log
    //$items_array = $this->cartObject->get_items_array();
    //print_r($items_array); //outputs to the output window at the very beginning (scroll up) for checking
    
    $this->assertArrayHasKey('1', $this->cartObject->get_items_array());
    //I had to code the get_items_array getter to test this assertArrayHasKey assert.
    //get_items_array returns items array. Array keys will be 0,1,2 and values will be item objects.
    //Eg: items = Array ( [0] => PizzacrItem Object1  [1] => PizzacrItem Object2 ... )
    //This test passes as the second item added will have the array key [1].
  }
  
  
  public function testSee_how_assertContains_works() {
    $inObj1 = new PizzacrItem(4, "Sicilian", 2, "Large", 13.90, 0); //item_cost = 0 because it will be updated to 27.80 in add_item()
    $inObj2 = new PizzacrItem(2, "Supreme", 2, "Large", 13.90, 0);

    $_SESSION['pc_counter'] = 0;
    
    $this->cartObject->add_item($inObj1);
    $this->cartObject->add_item($inObj2);
    
    //for testing in the console log
    //$items_array = $this->cartObject->get_items_array();
    //print_r($items_array); //outputs to the output window at the very beginning (scroll up) for checking
    
    $this->assertContains( $inObj2, $this->cartObject->get_items_array());
     //I had to code the get_items_array getter to test this assertArrayHasKey assert.
    //To assert if an array has a value $inObj
    //Eg: items = Array ( [0] => $inObj1  [1] => $inObj2 ... )
    //This test passes as the second item added will have the array value $inObj1.
  }
  
  
  /**
     * @dataProvider dataProvider_1
     */
    public function testData_Provider($a, $b, $expected)
    {
        $this->assertSame($expected, $a + $b);
    }

  
  public function dataProvider_1() //Using a data provider with named datasets, so the name will be output if that data fails
    {
        return [
            'adding zeros'  => [0, 0, 0], //pass
            'zero plus one' => [0, 1, 1], //pass
            'one plus zero' => [1, 0, 1], //pass
            'one plus one'  => [1, 1, 3]  //fails
        ];
    }

  
}